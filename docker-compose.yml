# 'docker-compose up -d' would give an WARNING: Some services (elasticsearch)
#   use the 'deploy' key, which will be ignored. Compose does not support
#   'deploy' configuration - use `docker stack deploy` to deploy to a swarm.
#   
# use following commands instead to ignore the warning:
#
#   docker-compose --compatibility up -d
#   docker-compose --compatibility down
#
#
# * installation
#
# 1. docker-compose up --build -d
#
# ** deprecated
# 2. .docker_data directories ownership change - permission issues:
#     - elasticsearch
#       sudo chown -R 1000:1000 .docker_data/elasticsearch
#     - graylog
#       sudo chown -R 1100:1100 .docker_data/graylog
#
# 3. if no 'pricewatch' database installed
#     1) create database
#         docker-compose exec postgres createdb -h postgres -U pricewatchuser pricewatch
#     2) django migration
#         docker-compose exec web python manage.py [migrate][makemigrations][sqlmigrate]
#
# 4. create django superuser
#     docker-compose exec web python manage.py createsuperuser
#
# note: django (web) container hangs a while on 'docker-compose up': Watching for file changes with StatReloader, because of the setting DEBUG=True.
#       Edit DEBUG=False and save, and then edit back DEBUG=True and save would help.
#
#
# * how to run postgres db terminal
#
#   docker-compose exec postgres psql -h postgres -U pricewatchuser
#
#
# * attach to a running container
#
#   docker attach --sig-proxy=false CONTAINER_ID_OR_NAME
#
#
# * how to schedule bot:
#
#   i.e.
#
#   docker-compose run bot python run.py discover -a urls="https://www.amazon.com/Gildan-Mens-T-Shirt-Assortment-Small/dp/B077ZKF9ZN/?_encoding=UTF8&refRID=NSX2F9SWW59TZN9SDX7K&th=1" -a lat="43.7292" -a lng="-79.393" -d
#
#   docker-compose run bot python run.py discover -a skus="B087K45RSF" -a domain="amazon.com"
#
#
# * how to test bot
#
#   docker-compose run bot python -m unittest discover -v
#
# * how to test web (django)
#
#   docker-compose exec web python manage.py test [pwweb.resources.tests]
#
# * restart single service within docker-compose.yml
#
#   docker-compose restart elasticsearch
#

#####
#
# install node.js in web dockerfile?
#
# https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04
# (use Option 3 - nvm)
#
#####

version: '3.4'

services:

  # Scrapyd: https://scrapyd.readthedocs.io/en/stable/
  scrapyd:
    build:
        context: ./scrapyd
    container_name: scrapyd
    volumes:
      # scrapyd data directory (items, eggs, logs, and so on)
      - scrapyd_data:/var/lib/scrapyd/
      # scrapyd config file
      - type: bind
        source: ./scrapyd/scrapyd.conf
        target: /etc/scrapyd/scrapyd.conf
      # app config file
      - type: bind
        source: ./.config/
        target: /usr/local/etc/pricewatch/
    networks:
      - pricewatch
    ports:
      # Scrapyd JSON API and web interface
      - 6800:6800
    restart:
      always

  # bot
  bot:
    build:
      context: ./pkg_pricewatch_bot/
    container_name: bot
    volumes:
      # src directory
      - type: bind
        source: ./pkg_pricewatch_bot/src/
        target: /app/
      # app config file
      - type: bind
        source: ./.config/
        target: /usr/local/etc/pricewatch/
    # ports:
    #   - 5677:5678 ### DEBUGGER ###
    networks:
      - pricewatch

  # postgres
  postgres:
    image: postgres:12
    container_name: postgres
    environment:
      POSTGRES_USER: pricewatchuser
      POSTGRES_PASSWORD: qwer1234
      PGDATA: /data/postgres
    volumes:
      - postgres_db:/data/postgres/
    ports:
      - 5433:5432
    networks:
      - pricewatch
    restart:
      unless-stopped

  # web
  web:
    build:
      context: ./pkg_pricewatch_web/
    container_name: web
    volumes:
      # src directory
      - type: bind
        source: ./pkg_pricewatch_web/src/
        target: /app/
      # app config file
      - type: bind
        source: ./.config/
        target: /usr/local/etc/pricewatch/
    ports:
      - 8000:8000
      # - 5678:5678 ### DEBUGGER ###
    depends_on:
      - postgres
    networks:
      - pricewatch

  # MongoDB: https://hub.docker.com/_/mongo/
  mongo:
    image: mongo:3
    volumes:
      - mongo_db:/data/db/
    networks:
      - pricewatch

  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docker.html
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.5
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data/
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1G
    networks:
      - pricewatch

  # Graylog: https://hub.docker.com/r/graylog/graylog/
  graylog:
    image: graylog/graylog:3.3.1
    volumes:
      - graylog_journal:/usr/share/graylog/data/journal/
    environment:
      # CHANGE ME (must be at least 16 characters)!
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://localhost:9000/
    networks:
      - pricewatch
    depends_on:
      - mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - 9000:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp

networks:
  pricewatch:
    driver: bridge

volumes:
  postgres_db:
    driver: local
  scrapyd_data:
    driver: local
  mongo_db:
    driver: local
  elasticsearch_data:
    driver: local
  graylog_journal:
    driver: local
